devtools::load_all(".")
dials::parameters(ml_lgbm())
library(treesnip)
dials::parameters(ml_lgbm())
devtools::load_all(".")
dials::parameters(data_recipe())
dials::parameters(data_recipe)
dials::parameters(data_recipe(DF = targets::tar_read(raw_data)))
dials::parameters(data_recipe(DF = targets::tar_read(raw_data), features = "xxx"))
use_r("hyperparameter_tune")
??finalize
??metric_set
targets::tar_make()
targets::tar_make()
library(targets)
mod_workflow <- tar_read(fitted_models)
mod_workflow
workflowsets::rank_results(mod_workflow)
workflowsets::rank_results(mod_workflow) |>
View()
workflowsets::autoplot(mod_workflow)
workflowsets::autoplot(mod_workflow, select_best = TRUE)
tune::show_best(mod_workflow)
install.packages("usemodels")
ames_train <- tar_read(raw_data)
usemodels::use_xgboost(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type +
Latitude + Longitude,
data = ames_train,
# Add comments explaining some of the code:
verbose = TRUE)
install.packages("renv")
renv::record("renv@0.15.0")
renv::restore()
install.packages(c("broom", "forecast", "gert", "httpuv", "igraph", "targets", "wk"))
install.packages(c("broom", "forecast", "gert", "httpuv", "igraph", "targets"))
install.packages("forecast")
install.packages("wk")
install.packages(c("backports", "BH", "brio"), lib="/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
updateR::updateR(admin_password = "Jananee@87")
devtools::install_github('andreacirilloac/updateR')
updateR::updateR(admin_password = "Jananee@87")
updateR::updateR()
update.packages(checkBuilt=TRUE)
version
packageStatus()
renv::status()
renv::restore()
renv::status()
renv::snapshot()
renv::status()
library(targets)
grd_results <- tar_read(fitted_models)
workflowsets::rank_results(grd_results)
devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
getwd()
create_package("/Volumes/Data Science/Data Science Projects/ausretail")
install.packages("devtools")
install.packages("renv", lib="/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
renv::snapshot()
renv::status()
install.packages(c("broom", "cli", "clustermq", "dtplyr", "fansi"))
install.packages(c("broom", "cli", "clustermq", "dtplyr", "fansi"))
install.packages(c("broom", "cli", "clustermq", "dtplyr", "fansi"))
install.packages(c("broom", "cli", "clustermq", "dtplyr", "fansi"))
library(targets)
library(targets)
grd_results <- tar_read(fitted_models)
workflowsets::rank_results(grd_results)
renv::restore(packages = "renv")
renv::restore()
renv::restore()
renv::snapshot()
renv::deactivate()
renv::init()
renv::init()
install.packages(c("brew", "lightgbm", "modeltime", "RcppArmadillo", "reticulate", "sf", "testthat", "timetk", "units"))
install.packages(c("brew", "broom", "dials", "foreach", "generics", "glue", "gower", "h2o", "hardhat", "iterators", "magrittr", "Matrix", "nlme", "nloptr", "pillar", "readr", "rlang", "rpart", "tidyr", "yaml"), lib="/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
renv::snapshot()
grd_results <- targets::tar_read(fitted_models)
workflowsets::rank_results(grd_results)
workflowsets::autoplot(mod_workflow, select_best = TRUE)
workflowsets::autoplot(grd_results, select_best = TRUE)
tune::show_best(grd_results)
tune::show_best(grd_results)
grd_results %>%
workflowsets::rank_results() %>%
dplyr::filter(.metric == "rmse") %>%
dplyr::select(model, .config, rmse = mean, rank)
best_results <- grd_results %>%
workflowsets::extract_workflow_set_result("linear_reg") %>%
select_best(metric = "rmse")
best_results <- grd_results %>%
workflowsets::extract_workflow_set_result("linear_reg") %>%
tune::select_best(metric = "rmse")
grd_results %>%
workflowsets::extract_workflow_set_result("linear_reg")
grd_results %>%
workflowsets::extract_workflow_set_result("linear_reg")
grd_results
grd_results %>%
workflowsets::extract_workflow_set_result("recipe_glmnet")
grd_results %>%
workflowsets::extract_workflow_set_result("recipe_glmnet") %>%
tune::select_best(metric = "rmse")
best_results <- grd_results %>%
workflowsets::extract_workflow_set_result("recipe_glmnet") %>%
tune::select_best(metric = "rmse")
grd_results %>%
workflows::extract_workflow("recipe_glmnet")
grd_results %>%
workflowsets::extract_workflow("recipe_glmnet")
grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
workflows::finalize_workflow(best_results)
grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
workflowsets::finalize_workflow(best_results)
grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
tune::finalize_workflow(best_results) %
grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
tune::finalize_workflow(best_results)
splt <- tar_read(train_test_split)
splt
final_mod <- grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
tune::finalize_workflow(best_results) %>%
tune::last_fit(splt)
tune::collect_metrics(final_mod)
final_mod %>%
tune::ollect_predictions()
final_mod %>%
tune::collect_predictions()
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2)
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5)
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
ggplot2::coord_obs_pred()
??coord_obs_pred
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
library(ggplot2)
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
labs(x = "observed", y = "predicted")
install.packages("DALEXtra")
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod,
data = rsample::training(splt),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod,
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
final_mod
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |>
workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
DALEX::predict_parts(explainer_mod, rsample::training(splt)[1,])
DALEX::predict_parts(explainer_mod, rsample::training(splt)[1,] |> dplyr::select(-Sale_Price))
rsample::training(splt)[1,]
rsample::training(splt)[1,] |> dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, rsample::training(splt)[1,] |> dplyr::select(-Sale_Price))
new_dt <- rsample::training(splt)[100,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
new_dt
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
final_mod |>
workflowsets::extract_workflow()
rsample::training(splt) |> dplyr::select(-Sale_Price)
rsample::training(splt)$Sale_Price
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
rsample::training(splt)[101,]
rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
??predict_functions
??predict_function
??predict_function
library(DALEXtra)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
library(tidyverse)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
library(tidymodels)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE,
precalculate = FALSE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE,
precalculate = FALSE
)
DALEX::model_parts(explainer_mod)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE,
precalculate = FALSE,
predict_function = predict
)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::model_parts(explainer_mod)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = FALSE
)
DALEX::model_parts(explainer_mod)
grd_results <- targets::tar_read(fitted_models)
grd_results %>% workflowsets::rank_results() %>%
dplyr::filter(.metric == "rmse") %>%
dplyr::select(model, .config, rmse = mean, rank)
best_results <- grd_results %>%
workflowsets::extract_workflow_set_result("recipe_glmnet") %>%
tune::select_best(metric = "rmse")
splt <- tar_read(train_test_split)
splt <- targets::tar_read(train_test_split)
final_mod <- grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
tune::finalize_workflow(best_results) %>%
tune::last_fit(splt)
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
labs(x = "observed", y = "predicted")
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
library(ggplot2)
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
final_mod |> workflowsets::extract_workflow()
rsample::training(splt) |> dplyr::select(-Sale_Price)
rsample::training(splt)$Sale_Price
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::pull_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
final_mod <- grd_results |>
workflowsets::extract_workflow("recipe_glmnet") |>
tune::finalize_workflow(best_results) |>
# tune::last_fit(splt)
fit(rsample::training(splt))
tune::collect_metrics(final_mod)
final_mod |>
tune::collect_predictions() |>
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
final_mod
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
# final_mod |> workflowsets::extract_workflow(),
final_mod,
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
final_mod <- grd_results |>
workflowsets::extract_workflow("recipe_glmnet") |>
tune::finalize_workflow(best_results) |>
tune::last_fit(splt)
tune::collect_metrics(final_mod)
final_mod |>
tune::collect_predictions() |>
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE,
predict_function = parsnip::predict
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE,
predict_function = predict
)
library("DALEXtra")
library("tidymodels")
library("recipes")
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::model_parts(explainer_mod)
rlang::last_error()
install.packages(c("brew", "lightgbm", "modeltime", "RcppArmadillo", "reticulate", "sf", "testthat", "timetk", "units"))
install.packages(c("testthat", "timetk"))
install.packages(c("RcppArmadillo", "reticulate", "sf"))
install.packages(c("brew", "lightgbm", "modeltime"))
install.packages(c("RcppArmadillo", "reticulate"))
install.packages("units")
renv::snapshot()
grd_results <- targets::tar_read(fitted_models)
grd_results |>
workflowsets::rank_results() |>
dplyr::filter(.metric == "rmse") |>
dplyr::select(model, .config, rmse = mean, rank)
best_results <- grd_results |>
workflowsets::extract_workflow_set_result("recipe_glmnet") |>
tune::select_best(metric = "rmse")
splt <- targets::tar_read(train_test_split)
final_mod <- grd_results |>
workflowsets::extract_workflow("recipe_glmnet") |>
tune::finalize_workflow(best_results) |>
tune::last_fit(splt)
tune::collect_metrics(final_mod)
final_mod |>
tune::collect_predictions() |>
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
library(ggplot2)
final_mod |>
tune::collect_predictions() |>
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
renv::restore()
renv::restore(exclude = "treesnip")
renv::status()
renv::snapshot()
renv::update()
renv::record("renv@0.15.5")
renv::status()
renv::snapshot()
