renv::snapshot()
renv::init()
renv::snapshot()
targets::tar_make()
renv::restore()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
install.packages("embed")
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_make()
??fit
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> dplyr::glimpse()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> View()
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> skimr::skim()
install.packages("skimr")
targets::tar_read(model_recipe) |> recipes::prep() |> recipes::juice() |> skimr::skim()
library(targets)
tar_read(train_test_split) |> rsample::training()
tar_read(train_test_split) |> rsample::training() |> View()
tar_read(train_test_split) |> rsample::training() |> skimr::skim()
targets::tar_make()
targets::tar_make()
targets::tar_make()
devtools::load_all(".")
model_fit(DF = rsample::training(tar_read(train_test_split)),
model_fit(DF = rsample::training(tar_read(train_test_split)),
model_set = tar_read(models_workflowset))
targets::tar_make()
targets::tar_make()
tar_read(fitted_models)
tar_read(models_workflowset)
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
devtools::load_all(".")
model_fit(DF = rsample::training(tar_read(train_test_split)),
model_set = tar_read(models_workflowset))
targets::tar_make()
model_fit(DF = rsample::training(tar_read(train_test_split)),
model_set = tar_read(models_workflowset))
model_fit(DF = rsample::training(tar_read(train_test_split)),
model_set = tar_read(models_workflowset))$fit
targets::tar_make()
tar_read(fitted_models)
targets::tar_make()
tar_read(fitted_models)
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
devtools::load_all(".")
targets::tar_make()
model_fit(DF = rsample::training(tar_read(train_test_split)),
model_set = tar_read(models_workflowset))
library(targets)
model_fit(DF = rsample::training(tar_read(train_test_split)),
model_set = tar_read(models_workflowset))
library(targets)
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
tar_read(fitted_models)
targets::tar_make()
tar_read(fitted_models)
tar_read(fitted_models)$fit
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
rsample::testing(tar_read(train_test_split))
rsample::testing(tar_read(train_test_split)) |> dplyr::glimpse()
targets::tar_make()
targets::tar_make()
targets::tar_make()
tar_read(predict_data)
tar_read(predict_data)$predict_value
targets::tar_make()
tar_read(predict_data)$predict_value
targets::tar_make()
targets::tar_make()
devtools::load_all(".")
predict_values(DF = rsample::testing(tar_read(train_test_split)),
model_fit = tar_read(fitted_models)))
devtools::load_all(".")
predict_values(DF = rsample::testing(tar_read(train_test_split)),
model_fit = tar_read(fitted_models)))
View()
devtools::load_all(".")
library(targets)
devtools::load_all(".")
predict_values(DF = rsample::testing(tar_read(train_test_split)),
model_fit = tar_read(fitted_models)))
predict_values(DF = rsample::testing(tar_read(train_test_split)),
model_fit = tar_read(fitted_models))
??predict
devtools::load_all(".")
predict_values(DF = rsample::testing(tar_read(train_test_split)),
model_fit = tar_read(fitted_models))
targets::tar_make()
targets::tar_make()
tar_read(fitted_models)
tar_read(fitted_models) |>
dplyr::pull(fit)
tar_read(fitted_models)$fit |>
predict(rsample::testing(tar_read(train_test_split)))
tar_read(fitted_models)$fit[[1]] |>
predict(rsample::testing(tar_read(train_test_split)))
targets::tar_make()
tar_read(predict_data)
??unnest
targets::tar_make()
targets::tar_make()
tar_read(predict_data)
targets::tar_make()
check(cran = FALSE)
use_package("dplyr", "Depends")
check(cran = FALSE)
use_mit_license()
use_package("ggplot2", "Imports")
use_package("glue", "Imports")
use_package("parsnip", "Imports")
use_package("plotly", "Imports")
use_package("purrr", "Imports")
use_package("recipes", "Imports")
use_package("rsample", "Imports")
use_package("scales", "Imports")
use_package("tidyr", "Imports")
use_package("viridis", "Imports")
use_package("withr", "Imports")
use_package("workflowsets", "Imports")
globalVariables(c("Latitude", "Longitude", "Neighborhood", "Sale_Price", "data", "fit", "info", "model",
"predict_value", "wflow_id"))
check(cran = FALSE)
check(cran = FALSE)
use_r("globals")
check(cran = FALSE)
check(cran = FALSE)
devtools::load_all(".")
tar_read(predict_data)
targets::tar_read(predict_data)
devtools::load_all(".")
plot_error(targets::tar_read(predict_data))
??coord_obs_pred()
devtools::load_all(".")
plot_error(targets::tar_read(predict_data))
library(tune)
plot_error(targets::tar_read(predict_data))
library(tidymodels)
plot_error(targets::tar_read(predict_data))
??CoordFixed
renv::snapshot()
devtools::load_all(".")
accuracy_metric(metrics = c("rmse", "mae"))
devtools::load_all(".")
accuracy_metric(metrics = c("rmse", "mae"))
devtools::load_all(".")
accuracy_metric(metrics = c("rmse", "mae"))
devtools::load_all(".")
accuracy_metric(metrics = c("rmse", "mae"))
devtools::load_all(".")
accuracy_metric(metrics = c("rmse", "mae"))
devtools::load_all(".")
accuracy_metric(DF = targets::tar_read(predict_data))
devtools::load_all(".")
accuracy_metric(DF = targets::tar_read(predict_data))
devtools::load_all(".")
accuracy_metric(DF = targets::tar_read(predict_data))
check(cran = FALSE)
use_package("tune")
check(cran = FALSE)
use_package("yardstick")
check(cran = FALSE)
tar_make()
targets::tar_make()
plot_error(targets::tar_read(predict_data))
library(tidymodels)
plot_error(targets::tar_read(predict_data))
plot_error(targets::tar_read(predict_data))
accuracy_metric(DF = targets::tar_read(predict_data))
library(targets)
tar_make()
tar_make()
tar_make()
tar_make()
tar_read(fitted_models)
tar_read(fitted_models)$result
tar_make()
tar_read(fitted_models)
tar_read(fitted_models)$result
tar_make()
tar_make()
autoplot(tar_read(fitted_models))
tar_read(fitted_models)
tar_make()
autoplot(tar_read(fitted_models))
tar_make()
autoplot(tar_read(fitted_models))
install.packages("logger")
tar_make()
tar_make()
autoplot(tar_read(fitted_models))
??control_resamples
tar_make()
tar_read(fitted_models)
tar_read(fitted_models)$result
collect_metrics(tar_read(fitted_models))
collect_metrics(tar_read(fitted_models)) |>
View()
collect_metrics(tar_read(fitted_models), summarize = FALSE) |>
View()
collect_metrics(tar_read(fitted_models), summarize = FALSE) |>
dplyr::filter(.metric == "rmse") |>
View()
??collect_metrics
tar_make()
tar_make()
tar_read(train_metrics) |>
View()
tar_read(train_metrics) |>
ggplot(aes(x = id, y = .estimator, col = wflow_id)) +
geom_point()
tar_read(train_metrics) |>
ggplot(aes(x = id, y = .estimate, col = wflow_id)) +
geom_point()
tar_read(train_metrics) |>
ggplot(aes(x = id, y = .estimate, col = wflow_id)) +
geom_point() +
theme_minimal()
collect_predictions(tar_read(fitted_models))
devtools::load_all(".")
collect_predictions(tar_read(fitted_models)) |>
plot_error()
devtools::load_all(".")
dials::parameters(ml_lgbm())
library(treesnip)
dials::parameters(ml_lgbm())
devtools::load_all(".")
dials::parameters(data_recipe())
dials::parameters(data_recipe)
dials::parameters(data_recipe(DF = targets::tar_read(raw_data)))
dials::parameters(data_recipe(DF = targets::tar_read(raw_data), features = "xxx"))
use_r("hyperparameter_tune")
??finalize
??metric_set
targets::tar_make()
targets::tar_make()
library(targets)
mod_workflow <- tar_read(fitted_models)
mod_workflow
workflowsets::rank_results(mod_workflow)
workflowsets::rank_results(mod_workflow) |>
View()
workflowsets::autoplot(mod_workflow)
workflowsets::autoplot(mod_workflow, select_best = TRUE)
tune::show_best(mod_workflow)
install.packages("usemodels")
ames_train <- tar_read(raw_data)
usemodels::use_xgboost(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type +
Latitude + Longitude,
data = ames_train,
# Add comments explaining some of the code:
verbose = TRUE)
install.packages("renv")
renv::record("renv@0.15.0")
renv::restore()
install.packages(c("broom", "forecast", "gert", "httpuv", "igraph", "targets", "wk"))
install.packages(c("broom", "forecast", "gert", "httpuv", "igraph", "targets"))
install.packages("forecast")
install.packages("wk")
install.packages(c("backports", "BH", "brio"), lib="/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
updateR::updateR(admin_password = "Jananee@87")
devtools::install_github('andreacirilloac/updateR')
updateR::updateR(admin_password = "Jananee@87")
updateR::updateR()
update.packages(checkBuilt=TRUE)
version
packageStatus()
renv::status()
renv::restore()
renv::status()
renv::snapshot()
renv::status()
library(targets)
grd_results <- tar_read(fitted_models)
workflowsets::rank_results(grd_results)
devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
getwd()
create_package("/Volumes/Data Science/Data Science Projects/ausretail")
install.packages("devtools")
install.packages("renv", lib="/Library/Frameworks/R.framework/Versions/4.1/Resources/library")
renv::snapshot()
renv::status()
