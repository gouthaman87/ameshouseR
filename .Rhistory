best_results <- grd_results %>%
workflowsets::extract_workflow_set_result("linear_reg") %>%
select_best(metric = "rmse")
best_results <- grd_results %>%
workflowsets::extract_workflow_set_result("linear_reg") %>%
tune::select_best(metric = "rmse")
grd_results %>%
workflowsets::extract_workflow_set_result("linear_reg")
grd_results %>%
workflowsets::extract_workflow_set_result("linear_reg")
grd_results
grd_results %>%
workflowsets::extract_workflow_set_result("recipe_glmnet")
grd_results %>%
workflowsets::extract_workflow_set_result("recipe_glmnet") %>%
tune::select_best(metric = "rmse")
best_results <- grd_results %>%
workflowsets::extract_workflow_set_result("recipe_glmnet") %>%
tune::select_best(metric = "rmse")
grd_results %>%
workflows::extract_workflow("recipe_glmnet")
grd_results %>%
workflowsets::extract_workflow("recipe_glmnet")
grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
workflows::finalize_workflow(best_results)
grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
workflowsets::finalize_workflow(best_results)
grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
tune::finalize_workflow(best_results) %
grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
tune::finalize_workflow(best_results)
splt <- tar_read(train_test_split)
splt
final_mod <- grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
tune::finalize_workflow(best_results) %>%
tune::last_fit(splt)
tune::collect_metrics(final_mod)
final_mod %>%
tune::ollect_predictions()
final_mod %>%
tune::collect_predictions()
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2)
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5)
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
ggplot2::coord_obs_pred()
??coord_obs_pred
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
library(ggplot2)
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred()
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
labs(x = "observed", y = "predicted")
install.packages("DALEXtra")
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod,
data = rsample::training(splt),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod,
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
final_mod
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |>
workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
DALEX::predict_parts(explainer_mod, rsample::training(splt)[1,])
DALEX::predict_parts(explainer_mod, rsample::training(splt)[1,] |> dplyr::select(-Sale_Price))
rsample::training(splt)[1,]
rsample::training(splt)[1,] |> dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, rsample::training(splt)[1,] |> dplyr::select(-Sale_Price))
new_dt <- rsample::training(splt)[100,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
new_dt
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
final_mod |>
workflowsets::extract_workflow()
rsample::training(splt) |> dplyr::select(-Sale_Price)
rsample::training(splt)$Sale_Price
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
rsample::training(splt)[101,]
rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
??predict_functions
??predict_function
??predict_function
library(DALEXtra)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
library(tidyverse)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
library(tidymodels)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::predict_parts(explainer_mod, new_observation = new_dt)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE,
precalculate = FALSE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE,
precalculate = FALSE
)
DALEX::model_parts(explainer_mod)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE,
precalculate = FALSE,
predict_function = predict
)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::model_parts(explainer_mod)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = FALSE
)
DALEX::model_parts(explainer_mod)
grd_results <- targets::tar_read(fitted_models)
grd_results %>% workflowsets::rank_results() %>%
dplyr::filter(.metric == "rmse") %>%
dplyr::select(model, .config, rmse = mean, rank)
best_results <- grd_results %>%
workflowsets::extract_workflow_set_result("recipe_glmnet") %>%
tune::select_best(metric = "rmse")
splt <- tar_read(train_test_split)
splt <- targets::tar_read(train_test_split)
final_mod <- grd_results %>%
workflowsets::extract_workflow("recipe_glmnet") %>%
tune::finalize_workflow(best_results) %>%
tune::last_fit(splt)
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
labs(x = "observed", y = "predicted")
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
library(ggplot2)
final_mod %>%
tune::collect_predictions() %>%
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
final_mod |> workflowsets::extract_workflow()
rsample::training(splt) |> dplyr::select(-Sale_Price)
rsample::training(splt)$Sale_Price
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::pull_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
final_mod <- grd_results |>
workflowsets::extract_workflow("recipe_glmnet") |>
tune::finalize_workflow(best_results) |>
# tune::last_fit(splt)
fit(rsample::training(splt))
tune::collect_metrics(final_mod)
final_mod |>
tune::collect_predictions() |>
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
final_mod
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
# final_mod |> workflowsets::extract_workflow(),
final_mod,
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
final_mod <- grd_results |>
workflowsets::extract_workflow("recipe_glmnet") |>
tune::finalize_workflow(best_results) |>
tune::last_fit(splt)
tune::collect_metrics(final_mod)
final_mod |>
tune::collect_predictions() |>
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE,
predict_function = parsnip::predict
)
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE,
predict_function = predict
)
library("DALEXtra")
library("tidymodels")
library("recipes")
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
new_dt <- rsample::training(splt)[101,] |>
dplyr::select(-Sale_Price)
DALEX::model_parts(explainer_mod)
rlang::last_error()
install.packages(c("brew", "lightgbm", "modeltime", "RcppArmadillo", "reticulate", "sf", "testthat", "timetk", "units"))
install.packages(c("testthat", "timetk"))
install.packages(c("RcppArmadillo", "reticulate", "sf"))
install.packages(c("brew", "lightgbm", "modeltime"))
install.packages(c("RcppArmadillo", "reticulate"))
install.packages("units")
renv::snapshot()
grd_results <- targets::tar_read(fitted_models)
grd_results |>
workflowsets::rank_results() |>
dplyr::filter(.metric == "rmse") |>
dplyr::select(model, .config, rmse = mean, rank)
best_results <- grd_results |>
workflowsets::extract_workflow_set_result("recipe_glmnet") |>
tune::select_best(metric = "rmse")
splt <- targets::tar_read(train_test_split)
final_mod <- grd_results |>
workflowsets::extract_workflow("recipe_glmnet") |>
tune::finalize_workflow(best_results) |>
tune::last_fit(splt)
tune::collect_metrics(final_mod)
final_mod |>
tune::collect_predictions() |>
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
library(ggplot2)
final_mod |>
tune::collect_predictions() |>
ggplot2::ggplot(ggplot2::aes(x = Sale_Price, y = .pred)) +
ggplot2::geom_abline(color = "gray50", lty = 2) +
ggplot2::geom_point(alpha = 0.5) +
tune::coord_obs_pred() +
ggplot2::labs(x = "observed", y = "predicted")
explainer_mod <- DALEXtra::explain_tidymodels(
final_mod |> workflowsets::extract_workflow(),
data = rsample::training(splt) |> dplyr::select(-Sale_Price),
y = rsample::training(splt)$Sale_Price,
label = "Lasso/Ridge",
verbose = TRUE
)
renv::restore()
renv::restore(exclude = "treesnip")
renv::status()
renv::snapshot()
renv::update()
renv::record("renv@0.15.5")
renv::status()
renv::snapshot()
updateR::updateR(admin_password = "Jananee@87")
devtools::install_github('andreacirilloac/updateR')
version
targets::tar_destroy()
remotes::install_github("rileytwo/darkstudio")
remotes::install_github("rileytwo/darkstudio")
darkstudio::activate()
targets::tar_destroy()
targets::tar_destroy()
targets::tar_make()
library(targets)
tar_load(raw_data)
targets::tar_make()
tar_load(raw_data)
View(raw_data)
targets::tar_make()
targets::tar_make()
renv::install("skimr")
renv::snapshot()
skimr::skim(raw_data)
targets::tar_make()
tar_load(model_recipe)
model_recipe |>
recipes::prep() |>
recipes::juice()
pak::pak("tidymodels/agua")
require(pak)
renv::install("pak")
pak::pak("tidymodels/agua")
.Last.error.trace
pak::pak("tidymodels/agua")
renv::update()
renv::snapshot()
pak::pak("tidymodels/agua")
Sys.setenv(R_REMOTES_STANDALONE="true")
pak::pak("tidymodels/agua")
Sys.getenv("GITHUB_PAT")
pak::pak("tidymodels/agua")
Sys.unsetenv("GITHUB_PAT")
pak::pak("tidymodels/agua")
Sys.getenv("GITHUB_PAT")
getOption(“repos”)
.libPaths()
renv::install("agua")
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
knitr::opts_chunk$set(echo = TRUE)
library(targets)
tar_load(fitted_models)
View(fitted_models)
fitted_models
fitted_models |>
workflowsets::extract_workflow("recipe_drf")
renv::install("vip")
fitted_models |>
workflowsets::extract_workflow("recipe_drf") |>
vip::vip()
fitted_models |>
workflowsets::extract_workflow("recipe_drf") |>
vip::vi()
fitted_models |>
workflowsets::extract_fit_parsnip("recipe_drf") |>
vip::vip()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
tar_load(fitted_models)
View(fitted_models)
targets::tar_make()
tar_load(fitted_models)
View(fitted_models)
targets::tar_make()
tar_load(fitted_models)
fitted_models
targets::tar_make()
tar_load(fitted_models)
fitted_models
targets::tar_make()
tar_load(fitted_models)
fitted_models
targets::tar_make()
tar_load(fitted_models)
fitted_models
targets::tar_make()
